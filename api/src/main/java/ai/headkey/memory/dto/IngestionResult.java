package ai.headkey.memory.dto;

import ai.headkey.memory.enums.Status;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Data Transfer Object representing the outcome of a memory ingestion operation.
 * Used by the Information Ingestion Module (IIM) to communicate the results
 * of processing a MemoryInput through the entire ingestion pipeline.
 */
public class IngestionResult {
    
    /**
     * Unique identifier assigned to the stored memory record.
     * Generated by the Memory Encoding System (MES) when the memory is successfully stored.
     */
    private String memoryId;
    
    /**
     * The category label assigned by the Contextual Categorization Engine (CCE).
     * Indicates how the system classified the ingested content.
     */
    private CategoryLabel category;
    
    /**
     * Flag indicating whether the memory was successfully encoded and stored.
     * True if the memory was persisted, false if storage failed.
     */
    private boolean encoded;
    
    /**
     * Agent ID associated with this ingestion operation.
     */
    private String agentId;
    
    /**
     * Result of belief analysis performed during ingestion.
     */
    private BeliefUpdateResult beliefUpdateResult;
    
    /**
     * Flag indicating whether this was a dry run (no actual storage).
     */
    private boolean dryRun;
    
    /**
     * Preview data for dry run operations.
     */
    private java.util.Map<String, Object> previewData;
    
    /**
     * List of belief IDs or names that were updated or reinforced due to this information.
     * Populated by the Belief Reinforcement & Conflict Analyzer (BRCA).
     */
    private List<String> updatedBeliefIds;
    
    /**
     * Status of the ingestion operation (SUCCESS or ERROR).
     */
    private Status status;
    
    /**
     * Error message providing details if the operation failed.
     * Only populated when status is ERROR.
     */
    private String errorMessage;
    
    /**
     * Server timestamp when the ingestion was processed.
     */
    private Instant timestamp;
    
    /**
     * Optional processing time in milliseconds.
     * Can be used for performance monitoring and optimization.
     */
    private Long processingTimeMs;
    
    /**
     * Default constructor.
     */
    public IngestionResult() {
        this.updatedBeliefIds = new ArrayList<>();
        this.timestamp = Instant.now();
        this.status = Status.ERROR; // Default to error until explicitly set to success
    }
    
    /**
     * Constructor for successful ingestion.
     * 
     * @param memoryId The generated memory ID
     * @param category The assigned category
     * @param encoded Whether the memory was encoded
     */
    public IngestionResult(String memoryId, CategoryLabel category, boolean encoded) {
        this();
        this.memoryId = memoryId;
        this.category = category;
        this.encoded = encoded;
        this.status = Status.SUCCESS;
    }
    
    /**
     * Constructor for failed ingestion.
     * 
     * @param errorMessage The error message describing the failure
     */
    public IngestionResult(String errorMessage) {
        this();
        this.errorMessage = errorMessage;
        this.status = Status.ERROR;
        this.encoded = false;
    }
    
    /**
     * Full constructor with all fields.
     * 
     * @param memoryId The memory ID
     * @param category The category label
     * @param encoded Whether encoded successfully
     * @param updatedBeliefIds List of updated belief IDs
     * @param status The operation status
     * @param errorMessage Error message (if any)
     */
    public IngestionResult(String memoryId, CategoryLabel category, boolean encoded, 
                          List<String> updatedBeliefIds, Status status, String errorMessage) {
        this.memoryId = memoryId;
        this.category = category;
        this.encoded = encoded;
        this.updatedBeliefIds = new ArrayList<>(updatedBeliefIds != null ? updatedBeliefIds : new ArrayList<>());
        this.status = status;
        this.errorMessage = errorMessage;
        this.timestamp = Instant.now();
    }
    
    /**
     * Creates a successful ingestion result.
     * 
     * @param memoryId The generated memory ID
     * @param category The assigned category
     * @return A successful IngestionResult
     */
    public static IngestionResult success(String memoryId, CategoryLabel category) {
        return new IngestionResult(memoryId, category, true);
    }
    
    /**
     * Creates a failed ingestion result.
     * 
     * @param errorMessage The error message
     * @return A failed IngestionResult
     */
    public static IngestionResult failure(String errorMessage) {
        return new IngestionResult(errorMessage);
    }
    
    /**
     * Adds a belief ID to the list of updated beliefs.
     * 
     * @param beliefId The belief ID to add
     */
    public void addUpdatedBelief(String beliefId) {
        if (beliefId != null && !beliefId.trim().isEmpty()) {
            if (updatedBeliefIds == null) {
                updatedBeliefIds = new ArrayList<>();
            }
            updatedBeliefIds.add(beliefId);
        }
    }
    
    /**
     * Checks if the ingestion was successful.
     * 
     * @return true if status is SUCCESS and memory was encoded
     */
    public boolean isSuccessful() {
        return status == Status.SUCCESS && encoded;
    }
    
    /**
     * Checks if any beliefs were updated during ingestion.
     * 
     * @return true if at least one belief was updated
     */
    public boolean hasBeliefsUpdated() {
        return updatedBeliefIds != null && !updatedBeliefIds.isEmpty();
    }
    
    /**
     * Gets the number of beliefs that were updated.
     * 
     * @return The count of updated beliefs
     */
    public int getUpdatedBeliefsCount() {
        return updatedBeliefIds != null ? updatedBeliefIds.size() : 0;
    }
    
    /**
     * Sets the processing time based on start time.
     * 
     * @param startTime The time when processing began
     */
    public void setProcessingTime(Instant startTime) {
        if (startTime != null) {
            this.processingTimeMs = Instant.now().toEpochMilli() - startTime.toEpochMilli();
        }
    }
    
    // Getters and Setters
    
    public String getMemoryId() {
        return memoryId;
    }
    
    public void setMemoryId(String memoryId) {
        this.memoryId = memoryId;
    }
    
    public CategoryLabel getCategory() {
        return category;
    }
    
    public void setCategory(CategoryLabel category) {
        this.category = category;
    }
    
    public boolean isEncoded() {
        return encoded;
    }
    
    public void setEncoded(boolean encoded) {
        this.encoded = encoded;
    }
    
    public boolean isEncodedSuccessfully() {
        return encoded;
    }
    
    public void setEncodedSuccessfully(boolean encoded) {
        this.encoded = encoded;
    }
    
    public String getAgentId() {
        return agentId;
    }
    
    public void setAgentId(String agentId) {
        this.agentId = agentId;
    }
    
    public BeliefUpdateResult getBeliefUpdateResult() {
        return beliefUpdateResult;
    }
    
    public void setBeliefUpdateResult(BeliefUpdateResult beliefUpdateResult) {
        this.beliefUpdateResult = beliefUpdateResult;
    }
    
    public boolean isDryRun() {
        return dryRun;
    }
    
    public void setDryRun(boolean dryRun) {
        this.dryRun = dryRun;
    }
    
    public java.util.Map<String, Object> getPreviewData() {
        return previewData;
    }
    
    public void setPreviewData(java.util.Map<String, Object> previewData) {
        this.previewData = previewData;
    }
    
    public List<String> getUpdatedBeliefIds() {
        return new ArrayList<>(updatedBeliefIds != null ? updatedBeliefIds : new ArrayList<>());
    }
    
    public void setUpdatedBeliefIds(List<String> updatedBeliefIds) {
        this.updatedBeliefIds = new ArrayList<>(updatedBeliefIds != null ? updatedBeliefIds : new ArrayList<>());
    }
    
    public Status getStatus() {
        return status;
    }
    
    public void setStatus(Status status) {
        this.status = status;
    }
    
    public String getErrorMessage() {
        return errorMessage;
    }
    
    public void setErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
    }
    
    public Instant getTimestamp() {
        return timestamp;
    }
    
    public void setTimestamp(Instant timestamp) {
        this.timestamp = timestamp;
    }
    
    public Long getProcessingTimeMs() {
        return processingTimeMs;
    }
    
    public void setProcessingTimeMs(Long processingTimeMs) {
        this.processingTimeMs = processingTimeMs;
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        IngestionResult that = (IngestionResult) o;
        return encoded == that.encoded &&
                dryRun == that.dryRun &&
                Objects.equals(memoryId, that.memoryId) &&
                Objects.equals(category, that.category) &&
                Objects.equals(updatedBeliefIds, that.updatedBeliefIds) &&
                Objects.equals(agentId, that.agentId) &&
                Objects.equals(beliefUpdateResult, that.beliefUpdateResult) &&
                Objects.equals(previewData, that.previewData) &&
                status == that.status &&
                Objects.equals(errorMessage, that.errorMessage) &&
                Objects.equals(timestamp, that.timestamp) &&
                Objects.equals(processingTimeMs, that.processingTimeMs);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(memoryId, category, encoded, updatedBeliefIds, agentId, 
                          beliefUpdateResult, dryRun, previewData, status, 
                          errorMessage, timestamp, processingTimeMs);
    }
    
    @Override
    public String toString() {
        return "IngestionResult{" +
                "memoryId='" + memoryId + '\'' +
                ", category=" + category +
                ", encoded=" + encoded +
                ", agentId='" + agentId + '\'' +
                ", beliefUpdateResult=" + beliefUpdateResult +
                ", dryRun=" + dryRun +
                ", previewData=" + previewData +
                ", updatedBeliefIds=" + updatedBeliefIds +
                ", status=" + status +
                ", errorMessage='" + errorMessage + '\'' +
                ", timestamp=" + timestamp +
                ", processingTimeMs=" + processingTimeMs +
                '}';
    }
}